ansible-doc -l

create a test account on 2 modes

sudo adduser test

cd /home/test/

sudo mkdir playbooks

sudo chown test:test playbooks/


exchnage  keys between systems as test user

ssh-keygen 

copy the pub key between systems

add public  keys of each instance  to other going to google cloud console.

any ansible server can act as control  server and as a client provided control server public key is available in authorised file on 
the client server


ansible structure
/etc/ansible
ansible.cfg
hosts  // contains  hosts that will be managed using this control server , contains groups of hosts that can be refrenced  by group
roles // 



ansible all --list-hosts

ansible -i hosts 4 -m ping

ansible local -m setup 

ansible local -m setup -a 'filter=ans*ipv4*'

infrastructure as a code 

prefer local inventory file to system  /etc/ansible/hosts

store all inventory files and playbooks in github

vagrant ssh control

vagrant@vagrant-ubuntu-trusty-64:~/work/ansible$ cat dev
[loadbalancer]
lb01


[webserver]
app01
app02

[database]
db01

[control]
control ansible_connection=local


vagrant@vagrant-ubuntu-trusty-64:~/work/ansible$ ansible -i dev --list-hosts all
 [WARNING]: Found both group and host with same name: control

  hosts (5):
    control 
    db01
    app01
    app02
    lb01
    
    


by default control hosts try to ssh into itself, it is unnecssary, use ansible_connection=local parameter to stop ssh.


order of precedence for inventory file ( local takes precedence over global inventory file which is by default /etc/ansible/hosts defined inside /etc/ansible/ansible.cfg)


local ansible.cfg takes precendence over system configuration file /etc/ansible/ansible.cfg

vagrant@vagrant-ubuntu-trusty-64:~/work/ansible$ cat ansible.cfg
[defaults]
inventory = ./dev

vagrant@vagrant-ubuntu-trusty-64:~/work/ansible$ ansible --list-hosts all
 [WARNING]: Found both group and host with same name: control

  hosts (5):
    control
    db01
    app01
    app02
    lb01
    
 
 Host selection
 select individual host from inventory, or group by role, or pattern 
 
 vagrant@vagrant-ubuntu-trusty-64:~/work/ansible$ ansible --list-hosts "*"
 [WARNING]: Found both group and host with same name: control

  hosts (5):
    control
    db01
    app01
    app02
    lb01
    
    
    vagrant@vagrant-ubuntu-trusty-64:~/work/ansible$ ansible --list-hosts loadbalancer
 [WARNING]: Found both group and host with same name: control

  hosts (1):
    lb01
    
    vagrant@vagrant-ubuntu-trusty-64:~/work/ansible$ ansible --list-hosts db01
 [WARNING]: Found both group and host with same name: control

  hosts (1):
    db01
    
    
    
    vagrant@vagrant-ubuntu-trusty-64:~/work/ansible$ ansible --list-hosts "app0*"
 [WARNING]: Found both group and host with same name: control

  hosts (2):
    app01
    app02
    
    
    vagrant@vagrant-ubuntu-trusty-64:~/work/ansible$ ansible --list-hosts database:webserver
 [WARNING]: Found both group and host with same name: control

  hosts (3):
    db01
    app01
    app02
    
    or 
    vagrant@vagrant-ubuntu-trusty-64:~/work/ansible$ ansible --list-hosts database,webserver
 [WARNING]: Found both group and host with same name: control

  hosts (3):
    db01
    app01
    app02
    
 vagrant@vagrant-ubuntu-trusty-64:~/work/ansible$ ansible --list-hosts webserver[0]
 [WARNING]: Found both group and host with same name: control

  hosts (1):
    app01
    
 
 
 vagrant@vagrant-ubuntu-trusty-64:~/work/ansible$ ansible --list-hosts \!control
 [WARNING]: Found both group and host with same name: control

  hosts (4):
    db01
    app01
    app02
    lb01

Tasks . (module + args to module)


vagrant@vagrant-ubuntu-trusty-64:~/work/ansible$ ansible -m ping  all
 [WARNING]: Found both group and host with same name: control

control | SUCCESS => {
    "changed": false,
    "ping": "pong"
}
lb01 | SUCCESS => {
    "changed": false,
    "ping": "pong"
}
app02 | SUCCESS => {
    "changed": false,
    "ping": "pong"
}
app01 | SUCCESS => {
    "changed": false,
    "ping": "pong"
}
db01 | SUCCESS => {
    "changed": false,
    "ping": "pong"
}

vagrant@vagrant-ubuntu-trusty-64:~/work/ansible$ ansible -m command -a "hostname" all
 [WARNING]: Found both group and host with same name: control

control | SUCCESS | rc=0 >>
vagrant-ubuntu-trusty-64

db01 | SUCCESS | rc=0 >>
vagrant-ubuntu-trusty-64

lb01 | SUCCESS | rc=0 >>
vagrant-ubuntu-trusty-64

app01 | SUCCESS | rc=0 >>
vagrant-ubuntu-trusty-64

app02 | SUCCESS | rc=0 >>
vagrant-ubuntu-trusty-64

vagrant@vagrant-ubuntu-trusty-64:~/work/ansible$ ansible -a "hostname" all   (same as)  ansible -m command -a "hostname" all
as command is default module 

Modules

docs.ansible.com
checks.bankofamerica.com/caccp/productlist.jsp


Play (set of target hosts and tasks to execute against the target hosts)


vagrant@vagrant-ubuntu-trusty-64:~/work/ansible$ ansible-playbook playbooks/hostname.yaml
 [WARNING]: Found both group and host with same name: control


PLAY [all] ******************************************************************************************

TASK [Gathering Facts] ******************************************************************************
ok: [control]
ok: [app01]
ok: [db01]
ok: [app02]
ok: [lb01]

TASK [get server hostname] **************************************************************************
changed: [app01]
changed: [app02]
changed: [db01]
changed: [lb01]
changed: [control]

PLAY RECAP ******************************************************************************************
app01                      : ok=2    changed=1    unreachable=0    failed=0
app02                      : ok=2    changed=1    unreachable=0    failed=0
control                    : ok=2    changed=1    unreachable=0    failed=0
db01                       : ok=2    changed=1    unreachable=0    failed=0
lb01                       : ok=2    changed=1    unreachable=0    failed=0


4 pillars (packages, services, sys config, app config)

pacakages required
service handler
system configuration
config files for app


Packages


vagrant@vagrant-ubuntu-trusty-64:~/work/ansible/playbooks$ cat loadbalancer.yaml
---
  - hosts: loadbalancer
    become: true
    tasks:
      - name: install nginx
        apt: name=nginx state=present update_cache=yes
        


we use jinja templating engine in variable substitution and in templates

vagrant@vagrant-ubuntu-trusty-64:~/work/ansible$ cat playbooks/webserver.yaml
---
  - hosts: webserver
    become: true
    tasks:
      - name: install apache2 server
        apt: name={{item}} state=present update_cache=yes
        with_items:
          - apache2
          - libapache2-mod-wsgi
          - python-pip
          - python-virtualenv
          


By default handler is not going to get executed unless it is called using notify

we can have notify mentioned serveral times in multiple tasks, they all get aggregated and will be executed once for each handler at the end of the play.

notify gets executed only if there is a change in state



copy
file
template
lineinfile
mysql


uri
register

      - name: verify backend response
        uri: url=http://{{item}} return_content=yes
        with_items: "{{groups.webserver}}"
        register: app_index
        
fail
when

      - fail: msg="index failed to return content"
        when: "'Hello, from sunny' not in item.content"
        with_items: "{{app_index.results}}"

        

vagrant@vagrant-ubuntu-trusty-64:~/work/ansible/roles$ ansible-galaxy init control


vagrant@vagrant-ubuntu-trusty-64:~/work/ansible/roles/control$ ls
defaults  files  handlers  meta  README.md  tasks  templates  tests  vars

site.yml contains playbooks inside paybook using include multi-functional key word

collect facts using setup module
ansible -m setup db01


variables

facts
defaults
vars
with_dict

shell
register
with_items
when

/home/vagrant/work/ansible/playbooks/group_vars/all
export EDITOR=vi
ansible vault create vault
ansible vault edit vault


vagrant@vagrant-ubuntu-trusty-64:~/work/ansible/playbooks/group_vars/all$ echo "password" > ~/.vault_pass.txt
vagrant@vagrant-ubuntu-trusty-64:~/work/ansible/playbooks/group_vars/all$ chmod 0600 !$
chmod 0600 ~/.vault_pass.txt



ansible-galaxy is an online repo for roles where others can contribute playbooks.

galaxy.ansible.com

ansible-galaxy install username.rolename

gather_facts false

skipping unnecessary cache update using cache_vaid_time for apt module

use limit command whenever necessary to limit the chnages to nodes in the inventory when executing tasks in the site.yaml

ansible-playook site.yaml --limit "app01"

limiting execution by tasks using tags
--list-tags

tags: [ 'packages' ]

ansible-playook site.yaml --tags "packages"

or 

negatition of skip this tag and execute the rest of plays

ansible-playook site.yaml --skip-tags "packages"

tags are flexible, we can add any number of tags to a task.

idempotence chnaged_when, failed_when 

accelarated mode for ssh

jump to specific taks 
- list-tasks
- step
- start-at-task

collecting unreachable failed hosts, ansible tracks failed hosts under .retry
site.retry
ansible-playbook site.yaml --limit @/home/../../site.retry


syntax check and dry run













